diff --git a/vendor/github.com/containers/common/pkg/config/config.go b/vendor/github.com/containers/common/pkg/config/config.go
index 9ac71c6c8..a7daf8d3f 100644
--- a/vendor/github.com/containers/common/pkg/config/config.go
+++ b/vendor/github.com/containers/common/pkg/config/config.go
@@ -17,6 +17,42 @@ import (
 	"github.com/sirupsen/logrus"
 )

+// Get path to the running executable.
+func GetExePath() string {
+	exePath, err := os.Executable()
+	if err == nil {
+		return exePath
+	}
+	exeRealPath, err := filepath.EvalSymlinks(exePath)
+	if err == nil {
+		return exeRealPath
+	}
+	panic(err)
+}
+
+const conda = true;
+// For Conda environments we transform default configuration paths like so:
+// (This assumes the executable always resides at PREFIX/bin/executable!)
+//   /etc/path -> PREFIX/bin/../etc/path -> PREFIX/etc/path
+//   /usr/share/path -> PREFIX/bin/../share/path -> PREFIX/share/path
+func PathRelativeToExe(path string) string {
+	if !conda {
+		return path
+	}
+	relativePath := strings.TrimPrefix(path, "/usr")
+	return filepath.Join(filepath.Dir(filepath.Dir(GetExePath())), relativePath)
+}
+
+func FallbackToPathRelativeToExe(path string) string {
+	if !conda {
+		return path
+	}
+	if _, err := os.Stat(path); err == nil {
+		return path
+	}
+	return PathRelativeToExe(path)
+}
+
 const (
 	// _configPath is the path to the containers/containers.conf
 	// inside a given config directory.
@@ -520,8 +556,8 @@ func systemConfigs() ([]string, error) {
 		}
 		return append(configs, path), nil
 	}
-	if _, err := os.Stat(DefaultContainersConfig); err == nil {
-		configs = append(configs, DefaultContainersConfig)
+	if _, err := os.Stat(PathRelativeToExe(DefaultContainersConfig)); err == nil {
+		configs = append(configs, PathRelativeToExe(DefaultContainersConfig))
 	}
 	if _, err := os.Stat(OverrideContainersConfig); err == nil {
 		configs = append(configs, OverrideContainersConfig)
diff --git a/vendor/github.com/containers/common/pkg/config/default.go b/vendor/github.com/containers/common/pkg/config/default.go
index 04aaac94d..417e71268 100644
--- a/vendor/github.com/containers/common/pkg/config/default.go
+++ b/vendor/github.com/containers/common/pkg/config/default.go
@@ -111,9 +111,9 @@ const (
 	DefaultPidsLimit = 2048
 	// DefaultPullPolicy pulls the image if it does not exist locally
 	DefaultPullPolicy = "missing"
-	// DefaultSignaturePolicyPath is the default value for the
+	// defaultSignaturePolicyPath  is the default value for the
 	// policy.json file.
-	DefaultSignaturePolicyPath = "/etc/containers/policy.json"
+	defaultSignaturePolicyPath  = "/etc/containers/policy.json"
 	// DefaultSubnet is the subnet that will be used for the default CNI
 	// network.
 	DefaultSubnet = "10.88.0.0/16"
@@ -144,7 +144,8 @@ func DefaultConfig() (*Config, error) {

 	cniConfig := _cniConfigDir

-	defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePolicyPath
+	defaultSigPath := FallbackToPathRelativeToExe(defaultSignaturePolicyPath)
+	defaultEngineConfig.SignaturePolicyPath = defaultSigPath
 	if unshare.IsRootless() {
 		configHome, err := homedir.GetConfigHome()
 		if err != nil {
@@ -153,8 +154,8 @@ func DefaultConfig() (*Config, error) {
 		sigPath := filepath.Join(configHome, DefaultRootlessSignaturePolicyPath)
 		defaultEngineConfig.SignaturePolicyPath = sigPath
 		if _, err := os.Stat(sigPath); err != nil {
-			if _, err := os.Stat(DefaultSignaturePolicyPath); err == nil {
-				defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePolicyPath
+			if _, err := os.Stat(defaultSigPath); err == nil {
+				defaultEngineConfig.SignaturePolicyPath = defaultSigPath
 			}
 		}
 		netns = "slirp4netns"
diff --git a/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go b/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
index 880f8c871..d140a91de 100644
--- a/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
+++ b/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
@@ -10,6 +10,7 @@ import (
 	"sync"

 	"github.com/BurntSushi/toml"
+	"github.com/containers/common/pkg/config"
 	"github.com/containers/image/v5/docker/reference"
 	"github.com/containers/image/v5/types"
 	"github.com/containers/storage/pkg/homedir"
@@ -499,7 +500,7 @@ func newConfigWrapperWithHomeDir(ctx *types.SystemContext, homeDir string) confi
 	} else if ctx != nil && ctx.RootForImplicitAbsolutePaths != "" {
 		wrapper.configPath = filepath.Join(ctx.RootForImplicitAbsolutePaths, systemRegistriesConfPath)
 	} else {
-		wrapper.configPath = systemRegistriesConfPath
+		wrapper.configPath = config.FallbackToPathRelativeToExe(systemRegistriesConfPath)
 	}

 	// potentially use both system and per-user dirs if not using per-user config file
@@ -510,7 +511,7 @@ func newConfigWrapperWithHomeDir(ctx *types.SystemContext, homeDir string) confi
 		wrapper.configDirPath = filepath.Join(ctx.RootForImplicitAbsolutePaths, systemRegistriesConfDirPath)
 		wrapper.userConfigDirPath = userRegistriesDirPath
 	} else {
-		wrapper.configDirPath = systemRegistriesConfDirPath
+		wrapper.configDirPath = config.FallbackToPathRelativeToExe(systemRegistriesConfDirPath)
 		wrapper.userConfigDirPath = userRegistriesDirPath
 	}

diff --git a/vendor/github.com/containers/image/v5/signature/policy_config.go b/vendor/github.com/containers/image/v5/signature/policy_config.go
index 82fbb68cb..fd8585eea 100644
--- a/vendor/github.com/containers/image/v5/signature/policy_config.go
+++ b/vendor/github.com/containers/image/v5/signature/policy_config.go
@@ -21,6 +21,7 @@ import (
 	"path/filepath"
 	"regexp"

+	"github.com/containers/common/pkg/config"
 	"github.com/containers/image/v5/docker/reference"
 	"github.com/containers/image/v5/transports"
 	"github.com/containers/image/v5/types"
@@ -75,7 +76,7 @@ func defaultPolicyPathWithHomeDir(sys *types.SystemContext, homeDir string) stri
 	if sys != nil && sys.RootForImplicitAbsolutePaths != "" {
 		return filepath.Join(sys.RootForImplicitAbsolutePaths, systemDefaultPolicyPath)
 	}
-	return systemDefaultPolicyPath
+	return config.FallbackToPathRelativeToExe(systemDefaultPolicyPath)
 }

 // NewPolicyFromFile returns a policy configured in the specified file.
