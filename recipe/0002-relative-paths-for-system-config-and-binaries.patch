From e1f832d24a3f170f373855d48ec2943dd0322e42 Mon Sep 17 00:00:00 2001
From: Uwe Korn <uwelk@xhochy.com>
Date: Sat, 13 May 2023 21:58:57 +0000
Subject: [PATCH 2/2] relative paths for system config and binaries

---
 .../containers/common/pkg/config/default.go   |  9 +++--
 .../containers/common/pkg/config/new.go       | 38 ++++++++++++++++++-
 .../sysregistriesv2/system_registries_v2.go   |  5 ++-
 .../image/v5/signature/policy_config.go       |  3 +-
 4 files changed, 47 insertions(+), 8 deletions(-)

diff --git a/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/default.go b/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/default.go
index 02ff128..bc15b7a 100644
--- a/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/default.go
+++ b/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/default.go
@@ -197,7 +197,8 @@ func defaultConfig() (*Config, error) {
 		return nil, err
 	}
 
-	defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePolicyPath
+	defaultSigPath := FallbackToPathRelativeToExe(DefaultSignaturePolicyPath)
+	defaultEngineConfig.SignaturePolicyPath = defaultSigPath
 	// NOTE: For now we want Windows to use system locations.
 	// GetRootlessUID == -1 on Windows, so exclude negative range
 	if unshare.GetRootlessUID() > 0 {
@@ -208,8 +209,8 @@ func defaultConfig() (*Config, error) {
 		sigPath := filepath.Join(configHome, DefaultRootlessSignaturePolicyPath)
 		defaultEngineConfig.SignaturePolicyPath = sigPath
 		if err := fileutils.Exists(sigPath); err != nil {
-			if err := fileutils.Exists(DefaultSignaturePolicyPath); err == nil {
-				defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePolicyPath
+			if err := fileutils.Exists(defaultSigPath); err == nil {
+				defaultEngineConfig.SignaturePolicyPath = defaultSigPath
 			}
 		}
 	}
@@ -357,7 +358,7 @@ func defaultEngineConfig() (*EngineConfig, error) {
 	c.CompressionFormat = "gzip"
 
 	c.HealthcheckEvents = true
-	c.HelperBinariesDir.Set(defaultHelperBinariesDir)
+	c.HelperBinariesDir.Set(append([]string{PathRelativeToExe("/usr/lib/podman")}, defaultHelperBinariesDir...))
 	if additionalHelperBinariesDir != "" {
 		// Prioritize additionalHelperBinariesDir over defaults.
 		c.HelperBinariesDir.Set(append([]string{additionalHelperBinariesDir}, c.HelperBinariesDir.Get()...))
diff --git a/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/new.go b/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/new.go
index 407a685..3c2867a 100644
--- a/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/new.go
+++ b/src/github.com/containers/podman/vendor/github.com/containers/common/pkg/config/new.go
@@ -148,6 +148,42 @@ func NewConfig(userConfigPath string) (*Config, error) {
 	return New(&Options{additionalConfigs: []string{userConfigPath}})
 }
 
+// Get path to the running executable.
+func GetExePath() string {
+	exePath, err := os.Executable()
+	if err == nil {
+		return exePath
+	}
+	exeRealPath, err := filepath.EvalSymlinks(exePath)
+	if err == nil {
+		return exeRealPath
+	}
+	panic(err)
+}
+
+const conda = true;
+// For Conda environments we transform default configuration paths like so:
+// (This assumes the executable always resides at PREFIX/bin/executable!)
+//   /etc/path -> PREFIX/bin/../etc/path -> PREFIX/etc/path
+//   /usr/share/path -> PREFIX/bin/../share/path -> PREFIX/share/path
+func PathRelativeToExe(path string) string {
+	if !conda {
+		return path
+	}
+	relativePath := strings.TrimPrefix(path, "/usr")
+	return filepath.Join(filepath.Dir(filepath.Dir(GetExePath())), relativePath)
+}
+
+func FallbackToPathRelativeToExe(path string) string {
+	if !conda {
+		return path
+	}
+	if _, err := os.Stat(path); err == nil {
+		return path
+	}
+	return PathRelativeToExe(path)
+}
+
 // Returns the list of configuration files, if they exist in order of hierarchy.
 // The files are read in order and each new file can/will override previous
 // file settings.
@@ -159,7 +195,7 @@ func systemConfigs() (configs []string, finalErr error) {
 		return append(configs, path), nil
 	}
 
-	configs = append(configs, DefaultContainersConfig)
+	configs = append(configs, PathRelativeToExe(DefaultContainersConfig))
 
 	var err error
 	path, err := overrideContainersConfigPath()
diff --git a/src/github.com/containers/podman/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go b/src/github.com/containers/podman/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
index 1b16147..0f4bada 100644
--- a/src/github.com/containers/podman/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
+++ b/src/github.com/containers/podman/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
@@ -11,6 +11,7 @@ import (
 	"sync"
 
 	"github.com/BurntSushi/toml"
+	"github.com/containers/common/pkg/config"
 	"github.com/containers/image/v5/docker/reference"
 	"github.com/containers/image/v5/types"
 	"github.com/containers/storage/pkg/fileutils"
@@ -584,7 +585,7 @@ func newConfigWrapperWithHomeDir(ctx *types.SystemContext, homeDir string) confi
 	} else if ctx != nil && ctx.RootForImplicitAbsolutePaths != "" {
 		wrapper.configPath = filepath.Join(ctx.RootForImplicitAbsolutePaths, systemRegistriesConfPath)
 	} else {
-		wrapper.configPath = systemRegistriesConfPath
+		wrapper.configPath = config.FallbackToPathRelativeToExe(systemRegistriesConfPath)
 	}
 
 	// potentially use both system and per-user dirs if not using per-user config file
@@ -595,7 +596,7 @@ func newConfigWrapperWithHomeDir(ctx *types.SystemContext, homeDir string) confi
 		wrapper.configDirPath = filepath.Join(ctx.RootForImplicitAbsolutePaths, systemRegistriesConfDirPath)
 		wrapper.userConfigDirPath = userRegistriesDirPath
 	} else {
-		wrapper.configDirPath = systemRegistriesConfDirPath
+		wrapper.configPath = config.FallbackToPathRelativeToExe(systemRegistriesConfPath)
 		wrapper.userConfigDirPath = userRegistriesDirPath
 	}
 
diff --git a/src/github.com/containers/podman/vendor/github.com/containers/image/v5/signature/policy_config.go b/src/github.com/containers/podman/vendor/github.com/containers/image/v5/signature/policy_config.go
index 8de705c..513bad1 100644
--- a/src/github.com/containers/podman/vendor/github.com/containers/image/v5/signature/policy_config.go
+++ b/src/github.com/containers/podman/vendor/github.com/containers/image/v5/signature/policy_config.go
@@ -20,6 +20,7 @@ import (
 	"os"
 	"path/filepath"
 
+	"github.com/containers/common/pkg/config"
 	"github.com/containers/image/v5/docker/reference"
 	"github.com/containers/image/v5/signature/internal"
 	"github.com/containers/image/v5/transports"
@@ -81,7 +82,7 @@ func defaultPolicyPathWithHomeDir(sys *types.SystemContext, homeDir string, syst
 		return filepath.Join(sys.RootForImplicitAbsolutePaths, systemPolicyPath), nil
 	}
 	if err := fileutils.Exists(systemPolicyPath); err == nil {
-		return systemPolicyPath, nil
+		return config.FallbackToPathRelativeToExe(systemPolicyPath), nil
 	}
 	return "", fmt.Errorf("no policy.json file found at any of the following: %q, %q", userPolicyFilePath, systemPolicyPath)
 }
