diff --git a/pkg/trust/policy.go b/pkg/trust/policy.go
index aa14fc7e1..18a0707f6 100644
--- a/pkg/trust/policy.go
+++ b/pkg/trust/policy.go
@@ -54,7 +54,7 @@ type genericRepoMap map[string]json.RawMessage
 
 // DefaultPolicyPath returns a path to the default policy of the system.
 func DefaultPolicyPath(sys *types.SystemContext) string {
-	systemDefaultPolicyPath := config.DefaultSignaturePolicyPath
+	systemDefaultPolicyPath := config.DefaultSignaturePath()
 	if sys != nil {
 		if sys.SignaturePolicyPath != "" {
 			return sys.SignaturePolicyPath
diff --git a/vendor/github.com/containers/common/pkg/config/config.go b/vendor/github.com/containers/common/pkg/config/config.go
index 5e965402c..9bea0659e 100644
--- a/vendor/github.com/containers/common/pkg/config/config.go
+++ b/vendor/github.com/containers/common/pkg/config/config.go
@@ -22,6 +22,42 @@ import (
 	"github.com/sirupsen/logrus"
 )
 
+// Get path to the running executable.
+func GetExePath() string {
+	exePath, err := os.Executable()
+	if err == nil {
+		return exePath
+	}
+	exeRealPath, err := filepath.EvalSymlinks(exePath)
+	if err == nil {
+		return exeRealPath
+	}
+	panic(err)
+}
+
+const conda = true;
+// For Conda environments we transform default configuration paths like so:
+// (This assumes the executable always resides at PREFIX/bin/executable!)
+//   /etc/path -> PREFIX/bin/../etc/path -> PREFIX/etc/path
+//   /usr/share/path -> PREFIX/bin/../share/path -> PREFIX/share/path
+func PathRelativeToExe(path string) string {
+	if !conda {
+		return path
+	}
+	relativePath := strings.TrimPrefix(path, "/usr")
+	return filepath.Join(filepath.Dir(filepath.Dir(GetExePath())), relativePath)
+}
+
+func FallbackToPathRelativeToExe(path string) string {
+	if !conda {
+		return path
+	}
+	if _, err := os.Stat(path); err == nil {
+		return path
+	}
+	return PathRelativeToExe(path)
+}
+
 const (
 	// _configPath is the path to the containers/containers.conf
 	// inside a given config directory.
@@ -762,8 +798,8 @@ func systemConfigs() ([]string, error) {
 		}
 		return append(configs, path), nil
 	}
-	if _, err := os.Stat(DefaultContainersConfig); err == nil {
-		configs = append(configs, DefaultContainersConfig)
+	if _, err := os.Stat(PathRelativeToExe(DefaultContainersConfig)); err == nil {
+		configs = append(configs, PathRelativeToExe(DefaultContainersConfig))
 	}
 	if _, err := os.Stat(OverrideContainersConfig); err == nil {
 		configs = append(configs, OverrideContainersConfig)
@@ -1342,7 +1378,7 @@ func (c *Config) FindHelperBinary(name string, searchPATH bool) (string, error)
 	if len(c.Engine.HelperBinariesDir) == 0 {
 		return "", fmt.Errorf("could not find %q because there are no helper binary directories configured.  %s", name, configHint)
 	}
-	return "", fmt.Errorf("could not find %q in one of %v.  %s", name, c.Engine.HelperBinariesDir, configHint)
+	return "", fmt.Errorf("could not find %q in one of %v.  %s", name, dirList, configHint)
 }
 
 // ImageCopyTmpDir default directory to store temporary image files during copy
diff --git a/vendor/github.com/containers/common/pkg/config/config_linux.go b/vendor/github.com/containers/common/pkg/config/config_linux.go
index 4ce5d0320..0852e2994 100644
--- a/vendor/github.com/containers/common/pkg/config/config_linux.go
+++ b/vendor/github.com/containers/common/pkg/config/config_linux.go
@@ -16,7 +16,8 @@ const (
 
 	// DefaultSignaturePolicyPath is the default value for the
 	// policy.json file.
-	DefaultSignaturePolicyPath = "/etc/containers/policy.json"
+	// Overridden by Conda
+	defaultSignaturePolicyPath = "/etc/containers/policy.json"
 )
 
 func selinuxEnabled() bool {
diff --git a/vendor/github.com/containers/common/pkg/config/default.go b/vendor/github.com/containers/common/pkg/config/default.go
index e27f63064..6447db97e 100644
--- a/vendor/github.com/containers/common/pkg/config/default.go
+++ b/vendor/github.com/containers/common/pkg/config/default.go
@@ -140,6 +140,27 @@ const (
 	DefaultVolumePluginTimeout = 5
 )
 
+// DefaultSignaturePath returns the default signature policy path.
+// If an error occurs return a fallback default
+func DefaultSignaturePath() string {
+	defaultSigPath := FallbackToPathRelativeToExe(defaultSignaturePolicyPath)
+	sigPath := defaultSigPath
+	if useUserConfigLocations() {
+		configHome, err := homedir.GetConfigHome()
+		if err != nil {
+			sigPath = defaultSigPath
+		} else {
+			sigPath = filepath.Join(configHome, DefaultRootlessSignaturePolicyPath)
+			if _, err := os.Stat(sigPath); err != nil {
+				if _, err := os.Stat(defaultSigPath); err == nil {
+					sigPath = defaultSigPath
+				}
+			}
+		}
+	}
+	return sigPath
+}
+
 // DefaultConfig defines the default values from containers.conf.
 func DefaultConfig() (*Config, error) {
 	defaultEngineConfig, err := defaultConfigFromMemory()
@@ -147,20 +168,7 @@ func DefaultConfig() (*Config, error) {
 		return nil, err
 	}
 
-	defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePolicyPath
-	if useUserConfigLocations() {
-		configHome, err := homedir.GetConfigHome()
-		if err != nil {
-			return nil, err
-		}
-		sigPath := filepath.Join(configHome, DefaultRootlessSignaturePolicyPath)
-		defaultEngineConfig.SignaturePolicyPath = sigPath
-		if _, err := os.Stat(sigPath); err != nil {
-			if _, err := os.Stat(DefaultSignaturePolicyPath); err == nil {
-				defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePolicyPath
-			}
-		}
-	}
+	defaultEngineConfig.SignaturePolicyPath = DefaultSignaturePath()
 
 	cgroupNS := "host"
 	if cgroup2, _ := cgroupv2.Enabled(); cgroup2 {
diff --git a/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go b/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
index 463e77028..c734b34d9 100644
--- a/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
+++ b/vendor/github.com/containers/image/v5/pkg/sysregistriesv2/system_registries_v2.go
@@ -11,6 +11,7 @@ import (
 	"sync"
 
 	"github.com/BurntSushi/toml"
+	"github.com/containers/common/pkg/config"
 	"github.com/containers/image/v5/docker/reference"
 	"github.com/containers/image/v5/types"
 	"github.com/containers/storage/pkg/homedir"
@@ -577,7 +578,7 @@ func newConfigWrapperWithHomeDir(ctx *types.SystemContext, homeDir string) confi
 	} else if ctx != nil && ctx.RootForImplicitAbsolutePaths != "" {
 		wrapper.configPath = filepath.Join(ctx.RootForImplicitAbsolutePaths, systemRegistriesConfPath)
 	} else {
-		wrapper.configPath = systemRegistriesConfPath
+		wrapper.configPath = config.FallbackToPathRelativeToExe(systemRegistriesConfPath)
 	}
 
 	// potentially use both system and per-user dirs if not using per-user config file
@@ -588,7 +589,7 @@ func newConfigWrapperWithHomeDir(ctx *types.SystemContext, homeDir string) confi
 		wrapper.configDirPath = filepath.Join(ctx.RootForImplicitAbsolutePaths, systemRegistriesConfDirPath)
 		wrapper.userConfigDirPath = userRegistriesDirPath
 	} else {
-		wrapper.configDirPath = systemRegistriesConfDirPath
+		wrapper.configDirPath = config.FallbackToPathRelativeToExe(systemRegistriesConfDirPath)
 		wrapper.userConfigDirPath = userRegistriesDirPath
 	}
 
diff --git a/vendor/github.com/containers/image/v5/signature/policy_config.go b/vendor/github.com/containers/image/v5/signature/policy_config.go
index 5ca4ad713..5728883fa 100644
--- a/vendor/github.com/containers/image/v5/signature/policy_config.go
+++ b/vendor/github.com/containers/image/v5/signature/policy_config.go
@@ -20,6 +20,7 @@ import (
 	"os"
 	"path/filepath"
 
+	"github.com/containers/common/pkg/config"
 	"github.com/containers/image/v5/docker/reference"
 	"github.com/containers/image/v5/signature/internal"
 	"github.com/containers/image/v5/transports"
@@ -71,7 +72,7 @@ func defaultPolicyPathWithHomeDir(sys *types.SystemContext, homeDir string) stri
 	if sys != nil && sys.RootForImplicitAbsolutePaths != "" {
 		return filepath.Join(sys.RootForImplicitAbsolutePaths, systemDefaultPolicyPath)
 	}
-	return systemDefaultPolicyPath
+	return config.FallbackToPathRelativeToExe(systemDefaultPolicyPath)
 }
 
 // NewPolicyFromFile returns a policy configured in the specified file.
